{{- if empty .Values.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: "amps-secret"
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace "amps-secret") | default dict }}
  # set $jwtSecret to existing secret data or generate a random one when not exists
  {{- $cookie := (get $secret "cookie") | default (randAlphaNum 32 | b64enc) }}
  {{- $keybase := (get $secret "keybase") | default (randAlphaNum 64 | b64enc) }}

  # generate 32 chars long random string, base64 encode it and then double-quote the result string.
  cookie: {{ $cookie | b64enc | quote }}
  keybase: {{ $keybase | b64enc | quote }}

{{- end }}